/**
*/
var shell = require("shelljs");
var random = require("random-js")();

module.exports = new gPhoto2();

function gPhoto2(){
	this.save_dir = '/var/www/gphoto-client';
	this.save_path = '/img/';
}

gPhoto2.prototype.connected = function(callback) {
	this.exec(
		[
			"auto-detect"
		],
		function(code, stdout, stderr) {
			if (typeof callback == 'function') {
				callback(stdout.split("\n").length > 3 ? true : false);
			}
		}
	);
}

gPhoto2.prototype.takePhoto = function(success, error) {
	var self = this;
	var file_name = random.integer(9999, 9999999) + ".jpg";
	
	this.exec(
		[
			"capture-image-and-download", 
			"no-keep", 
			"quiet", 
			{
				"filename": this.save_dir + this.save_path + file_name
			}
		],
		function(code, stdout, stderr) {
			if (stderr && typeof error == 'function') {
				error(Error("Cannot take photo"));
				return;
			}
			
			success({
				path: self.save_path + file_name
			});
		}
	);
}

gPhoto2.prototype.params = function(params) {	
	if (typeof params != 'object') {
		throw new TypeError("argument params is not valid");
	}
	
	return params
		.map(function(elem){
			if (typeof elem == 'object') {
				return Object.keys(elem).map(function(key) {
					return '--' + key + ' ' + elem[key]
				}).join(" ");
			}
			return '--' + elem;
		})
		.join(" ");
}

gPhoto2.prototype.exec = function(params, callback) {
	shell.exec(
		"gphoto2 " + this.params(params),
		{ silent: true },
		function(code, stdout, stderr) {
			if (typeof callback == 'function') {
				callback(code, stdout, stderr);
			}
		}
	);
}